proc	fib		
==	fibArr[x]	0	
jz	L1:		
-	x	1	@temp1
pushpara	@temp1		
call	fib	@temp2	
-	x	2	@temp3
pushpara	@temp3		
call	fib	@temp4	
+	@temp2	@temp4	@temp2
=	fibArr[x]	@temp2	
label	L1:		
return	fibArr[x]		
endp	fib		
proc	sort		
=	i	0	
label	L3:		
<	i	n	
jz	L2:		
+	i	1	@temp5
=	j	@temp5	
label	L5:		
<	j	n	
jz	L4:		
>	globalArr[i]	globalArr[j]	
jz	L6:		
=	temp	globalArr[i]	
=	globalArr[i]	globalArr[j]	
=	globalArr[j]	temp	
label	L6:		
+	j	1	j
jmp	L5:		
label	L4:		
+	i	1	i
jmp	L3:		
label	L2:		
endp	sort		
proc	main		
=	fibArr[0]	1	
=	fibArr[1]	1	
pushpara	9		
call	fib	@temp6	
=	i	0	
printStr	"fib[0-9] are as follows:"		
label	L7:		
printf	fibArr[i]		
+	i	1	@temp7
=	i	@temp7	
<	i	10	
jnz	L7:		
printStr	"please input a number n"		
scanf	n		
>	n	10	
jz	L8:		
=	n	10	
printStr	"n is too large, so it is set to 10"		
label	L8:		
printStr	"please input an array of n ints"		
=	i	0	
label	L10:		
<	i	n	
jz	L9:		
scanf	temp		
=	globalArr[i]	temp	
+	i	1	i
jmp	L10:		
label	L9:		
callvoid	sort		
=	i	0	
label	L12:		
<	i	n	
jz	L11:		
printf	globalArr[i]		
+	i	1	i
jmp	L12:		
label	L11:		
/	20	10	@temp8
+	@temp8	50	@temp8
-	3	43	@temp9
/	4	3	@temp10
*	@temp9	@temp10	@temp9
+	432	@temp9	@temp9
-	@temp9	5	@temp9
+	@temp9	3	@temp9
-	@temp8	@temp9	@temp8
=	n	@temp8	
printf	n		
endp	main		
