proc	funa		
==	d	e	
jz	L1:		
=	d	e	
jmp	L2:		
label	L1:		
>	d	e	
jz	L3:		
>=	d	e	
jz	L4:		
label	L4:		
label	L3:		
label	L2:		
<	d	e	
jz	L5:		
<=	d	e	
jz	L6:		
!=	d	e	
jz	L7:		
!=	2	0	
jz	L8:		
label	L8:		
label	L7:		
label	L6:		
label	L5:		
label	L9:		
=	d	e	
!=	d	e	
jnz	L9:		
=	f	0	
label	L11:		
<	f	10	
jz	L10:		
+	f	1	f
jmp	L11:		
label	L10:		
pushpara	d		
pushpara	e		
call	funa	@temp1	
callvoid	func		
=	d	d	
-	0	d	@temp2
+	@temp2	d	@temp2
=	d	@temp2	
*	a[1]	d	@temp3
/	@temp3	d	@temp3
+	@temp3	1	@temp3
pushpara	d		
pushpara	e		
call	funa	@temp4	
+	@temp3	@temp4	@temp3
+	@temp3	d	@temp3
+	@temp3	50	@temp3
=	d	@temp3	
return	1		
scanf	d		
scanf	e		
printStr	"123"		
printf	d		
printStr	"123"		
printf	d		
endp	funa		
proc	funb		
endp	funb		
proc	func		
endp	func		
proc	fib		
==	x	1	
jz	L12:		
return	1		
jmp	L13:		
label	L12:		
==	x	2	
jz	L14:		
return	1		
jmp	L15:		
label	L14:		
-	x	1	@temp5
pushpara	@temp5		
call	fib	@temp6	
-	x	2	@temp7
pushpara	@temp7		
call	fib	@temp8	
+	@temp6	@temp8	@temp6
return	@temp6		
label	L15:		
label	L13:		
endp	fib		
proc	main		
=	out	0	
=	i	1	
label	L17:		
<	i	10	
jz	L16:		
=	c[i]	0	
+	i	1	i
jmp	L17:		
label	L16:		
scanf	in1		
scanf	in2		
scanf	in3		
<	in1	5	
jz	L18:		
=	c[9]	in1	
label	L18:		
*	3	4	@temp9
/	@temp9	12	@temp9
*	3	@temp9	@temp9
+	@temp9	6	@temp9
=	out	c[@temp9]	
printf	out		
*	in2	in3	@temp10
+	out	@temp10	@temp10
=	out	@temp10	
printf	out		
pushpara	in1		
call	fib	@temp11	
+	out	@temp11	@temp11
=	out	@temp11	
printf	out		
endp	main		
