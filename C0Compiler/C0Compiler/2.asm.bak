.386
.model flat, stdcall  
option casemap: none
includelib msvcrt.lib
printf proto c
scanf proto c


.data
$formatD  byte "%d", 0
$formatC  byte "%c", 0
$formatDNewLine  byte "%d", 0AH, 0
$formatCNewLine  byte "%c", 0AH, 0
$big dword -17
$i dword 0
$j dword 0
$op dword 0
$small dword 49
$z dword 97
$str0 byte "please input op", 0AH, 0


.code

; fun
@fun proc

; fun prologue
push ebp
mov ebp, esp
sub esp, 12
push esi
push edi
push ebx

; fun body
mov eax, dword ptr [$op]
mov dword ptr [ebp-4], eax
mov dword ptr [ebp-8], eax
mov ebx, dword ptr [ebp-4]
push ebx
lea ecx, $formatCNewLine
push ecx
mov dword ptr [$op], eax
mov dword ptr [ebp-4], ebx
call printf
add esp, 8
mov eax, dword ptr [ebp-8]
push eax
lea ebx, $formatDNewLine
push ebx
mov dword ptr [ebp-8], eax
call printf
add esp, 8
jmp @fun_epilogue

; fun epilogue
@fun_epilogue:
pop ebx
pop edi
pop esi
mov esp, ebp
pop ebp
ret
@fun endp

; inputchar
@inputchar proc

; inputchar prologue
push ebp
mov ebp, esp
sub esp, 8
push esi
push edi
push ebx

; inputchar body
lea eax, $str0
push eax
call printf
add esp, 4
lea eax, dword ptr [ebp-4]
push eax
lea eax, [$formatC]
push eax
call scanf
add esp, 8
mov eax, dword ptr [ebp-4]
mov ebx, 43
cmp eax, ebx
jne L1
mov dword ptr [$op], eax
jmp L2
L1:
mov eax, dword ptr [ebp-4]
mov ebx, 45
cmp eax, ebx
jne L3
mov dword ptr [$op], eax
jmp L4
L3:
mov dword ptr [$op], 42
L4:
L2:

; inputchar epilogue
@inputchar_epilogue:
pop ebx
pop edi
pop esi
mov esp, ebp
pop ebp
ret
@inputchar endp

; input
@input proc

; input prologue
push ebp
mov ebp, esp
sub esp, 20
push esi
push edi
push ebx

; input body
mov dword ptr [ebp-8], 0
lea eax, dword ptr [ebp-12]
push eax
lea eax, [$formatD]
push eax
call scanf
add esp, 8
mov eax, dword ptr [ebp-12]
mov ebx, 0
cmp eax, ebx
jle L5
L6:
lea eax, dword ptr [$op]
push eax
lea eax, [$formatC]
push eax
call scanf
add esp, 8
mov eax, dword ptr [$op]
mov ebx, 42
cmp eax, ebx
je L7
mov ebx, dword ptr [ebp-8]
mov eax, ebx
jmp @input_epilogue
L7:
mov eax, dword ptr [ebp-12]
sub eax, 1
mov dword ptr [ebp-12], eax
mov ebx, dword ptr [ebp-12]
mov ecx, 0
cmp ebx, ecx
jg L6
L5:
mov eax, dword ptr [ebp-8]
jmp @input_epilogue

; input epilogue
@input_epilogue:
pop ebx
pop edi
pop esi
mov esp, ebp
pop ebp
ret
@input endp

; main
main proc

; main prologue
push ebp
mov ebp, esp
sub esp, 16
push esi
push edi
push ebx

; main body
call @input
add esp, 0
mov dword ptr [ebp-8], eax
push 117
push dword ptr [ebp-8]
mov dword ptr [ebp-4], eax
call @fun
add esp, 8
jmp @main_epilogue

; main epilogue
@main_epilogue:
pop ebx
pop edi
pop esi
mov esp, ebp
pop ebp
ret
main endp
end main
